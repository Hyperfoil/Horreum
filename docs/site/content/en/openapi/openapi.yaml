---
openapi: 3.1.0
components:
  schemas:
    APIKeyAuth:
      type: object
      properties:
        type:
          type: string
          description: type
        apiKey:
          type: string
          description: Api key
    Access:
      description: "Resources have different visibility within the UI. 'PUBLIC', 'PROTECTED'\
        \ and 'PRIVATE'. Restricted resources are not visible to users who do not\
        \ have the correct permissions"
      type: string
      enum:
      - PUBLIC
      - PROTECTED
      - PRIVATE
    Action:
      type: object
      required:
      - id
      - event
      - type
      - config
      - secrets
      - testId
      - active
      - runAlways
      properties:
        id:
          type: integer
          format: int32
        event:
          type: string
        type:
          type: string
        config:
          oneOf:
          - $ref: "#/components/schemas/GithubIssueCommentActionConfig"
          - $ref: "#/components/schemas/GithubIssueCreateActionConfig"
          - $ref: "#/components/schemas/HttpActionConfig"
          - $ref: "#/components/schemas/SlackChannelMessageActionConfig"
          type: object
          discriminator:
            propertyName: type
            mapping:
              github-issue-comment: "#/components/schemas/GithubIssueCommentActionConfig"
              github-issue-create: "#/components/schemas/GithubIssueCreateActionConfig"
              http: "#/components/schemas/HttpActionConfig"
              slack-channel-message: "#/components/schemas/SlackChannelMessageActionConfig"
        secrets:
          type: object
          properties:
            token:
              type: string
            modified:
              type: boolean
        testId:
          type: integer
          format: int32
        active:
          type: boolean
        runAlways:
          type: boolean
    ActionLog:
      description: Action Log
      type: object
      required:
      - id
      - level
      - timestamp
      - message
      - testId
      - event
      properties:
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        message:
          type: string
        testId:
          type: integer
          format: int32
        event:
          type: string
        type:
          type: string
    ActionType:
      description: Type of Action
      type: string
      enum:
      - HTTP
      - GITHUB_ISSUE_COMMENT
      - GITHUB_ISSUE_CREATE
      - SLACK_MESSAGE
    ApiKeyResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        type:
          $ref: "#/components/schemas/KeyType"
        creation:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        access:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        isRevoked:
          type: boolean
        toExpiration:
          type: integer
          format: int64
    BetterOrWorse:
      description: Result of running an Experiment
      type: string
      enum:
      - BETTER
      - SAME
      - WORSE
    ChangeDetection:
      type: object
      required:
      - id
      - model
      - config
      properties:
        id:
          type: integer
          format: int32
        model:
          type: string
        config:
          oneOf:
          - $ref: "#/components/schemas/RelativeDifferenceDetectionConfig"
          - $ref: "#/components/schemas/FixedThresholdDetectionConfig"
          - $ref: "#/components/schemas/EDivisiveDetectionConfig"
          type: object
          discriminator:
            propertyName: model
            mapping:
              relativeDifference: "#/components/schemas/RelativeDifferenceDetectionConfig"
              fixedThreshold: "#/components/schemas/FixedThresholdDetectionConfig"
              eDivisive: "#/components/schemas/EDivisiveDetectionConfig"
    ChangeDetectionModelType:
      description: Type of Change Detection Model
      type: string
      enum:
      - FIXED_THRESHOLD
      - RELATIVE_DIFFERENCE
      - EDIVISIVE
    CollectorApiDatastoreConfig:
      description: Type of backend datastore
      type: object
      required:
      - authentication
      - builtIn
      - url
      properties:
        authentication:
          oneOf:
          - $ref: "#/components/schemas/NoAuth"
          - $ref: "#/components/schemas/APIKeyAuth"
          - $ref: "#/components/schemas/UsernamePassAuth"
          type: object
          discriminator:
            propertyName: type
            mapping:
              none: "#/components/schemas/NoAuth"
              api-key: "#/components/schemas/APIKeyAuth"
              username: "#/components/schemas/UsernamePassAuth"
        builtIn:
          type: boolean
          description: Built In
        url:
          type: string
          description: "Collector url, e.g. https://collector.foci.life/api/v1/image-stats"
    ComparisonResult:
      description: Result of performing a Comparison
      type: object
      properties:
        overall:
          description: Was the Experiment dataset better or worse than the baseline
            dataset
          type: string
          enum:
          - BETTER
          - SAME
          - WORSE
        experimentValue:
          type: number
          format: double
          description: Experiment value
        baselineValue:
          type: number
          format: double
          description: Baseline value
        result:
          type: string
          description: The relative difference between the Experiment and Baseline
            Datasets
    ConditionComponent:
      type: object
      required:
      - name
      - title
      - description
      - type
      - properties
      properties:
        name:
          type: string
          description: Change detection model component name
          examples:
          - min
        title:
          type: string
          description: Change detection model component title
          examples:
          - Minimum
        description:
          type: string
          description: Change detection model component description
          examples:
          - Lower bound for acceptable datapoint values.
        type:
          type:
          - string
          - object
          enum:
          - LOG_SLIDER
          - ENUM
          - NUMBER_BOUND
          - SWITCH
          description: UI Component type
          examples:
          - '"LOG_SLIDER"'
        properties:
          type: object
          additionalProperties: {}
          description: Map of properties for component
          examples:
          - ""
    ConditionConfig:
      description: A configuration object for Change detection models
      type: object
      required:
      - name
      - title
      - description
      - ui
      properties:
        name:
          type: string
          description: Name of Change detection model
          examples:
          - fixedThreshold
        title:
          type: string
          description: UI name for change detection model
          examples:
          - Fixed Threshold
        description:
          type: string
          description: Change detection model description
          examples:
          - This model checks that the datapoint value is within fixed bounds.
        ui:
          type: array
          items:
            $ref: "#/components/schemas/ConditionComponent"
          description: A list of UI components for dynamically building the UI components
        defaults:
          type: object
          additionalProperties: {}
          description: A dictionary of UI default configuration items for dynamically
            building the UI components
    Dataset:
      description: A dataset is the JSON document used as the basis for all comparisons
        and reporting
      type: object
      required:
      - access
      - owner
      - start
      - stop
      - testid
      - data
      - ordinal
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        id:
          type: integer
          format: int32
          description: Dataset Unique ID
          examples:
          - 101
        description:
          type: string
          description: Run description
          examples:
          - Run on AWS with m7g.large
        testid:
          type: integer
          format: int32
          description: Test ID that Dataset relates to
          examples:
          - 101
        data:
          description: Data payload
          type: string
        ordinal:
          type: integer
          format: int32
          description: Dataset ordinal for ordered list of Datasets derived from a
            Run
          examples:
          - 1
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: List of Validation Errors
        runId:
          type: integer
          format: int32
          description: Run ID that Dataset relates to
          examples:
          - 101
    DatasetInfo:
      type: object
      required:
      - id
      - runId
      - ordinal
      - testId
      properties:
        id:
          type: integer
          format: int32
          description: Dataset ID for Dataset
          examples:
          - 101
        runId:
          type: integer
          format: int32
          description: Run ID that Dataset relates to
          examples:
          - 101
        ordinal:
          type: integer
          format: int32
          description: Ordinal position in ordered list
          examples:
          - 2
        testId:
          type: integer
          format: int32
          description: Test ID that Dataset relates to
          examples:
          - 103
    DatasetList:
      description: Result containing a subset of Dataset Summaries and the total count
        of available. Used in paginated tables
      type: object
      required:
      - total
      - datasets
      properties:
        total:
          type: integer
          format: int64
          description: Total number of Dataset Summaries available
          examples:
          - 64
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/DatasetSummary"
          description: List of Dataset Summaries. This is often a subset of total
            available.
    DatasetLog:
      description: Dataset Log
      type: object
      required:
      - id
      - level
      - timestamp
      - message
      - source
      - testId
      - runId
      - datasetId
      - datasetOrdinal
      properties:
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        message:
          type: string
        source:
          type: string
        testId:
          type: integer
          format: int32
        runId:
          type: integer
          format: int32
        datasetId:
          type: integer
          format: int32
        datasetOrdinal:
          type: integer
          format: int32
    DatasetSummary:
      type: object
      required:
      - access
      - owner
      - start
      - stop
      - id
      - runId
      - ordinal
      - testId
      - testname
      - schemas
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        id:
          type: integer
          format: int32
          description: Unique Dataset ID
          examples:
          - 101
        runId:
          type: integer
          format: int32
          description: Run ID that Dataset relates to
          examples:
          - 202
        ordinal:
          type: integer
          format: int32
          description: Ordinal position of Dataset Summary on returned List
          examples:
          - 3
        testId:
          type: integer
          format: int32
          description: Test ID that Dataset relates to
          examples:
          - 202
        testname:
          type: string
          description: Test name that the Dataset relates to
          examples:
          - my-comprehensive-benchmark
        description:
          type: string
          description: Dataset description
          examples:
          - Run on AWS with m7g.large
        view:
          description: map of view component ids to the LabelValueMap to render the
            component for this dataset
          type: object
          examples:
          - "{ \"[view_component_id]\": { \"[labelName]\": labelValue} }"
          $ref: "#/components/schemas/IndexedLabelValueMap"
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/SchemaUsage"
          description: List of Schema usages
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: List of Validation Errors
    Datastore:
      type: object
      description: Instance of backend datastore
      required:
      - access
      - owner
      - id
      - name
      - config
      - type
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Datastore id
          examples:
          - 101
        name:
          type: string
          description: "Name of the datastore, used to identify the datastore in the\
            \ Test definition"
          examples:
          - Perf Elasticsearch
        config:
          oneOf:
          - $ref: "#/components/schemas/CollectorApiDatastoreConfig"
          - $ref: "#/components/schemas/ElasticsearchDatastoreConfig"
          - $ref: "#/components/schemas/PostgresDatastoreConfig"
          type: object
        type:
          description: Type of backend datastore
          type: string
          enum:
          - POSTGRES
          - ELASTICSEARCH
          - COLLECTORAPI
          examples:
          - ELASTICSEARCH
    DatastoreTestResponse:
      type: object
      properties:
        msg:
          type: string
        success:
          type: boolean
    DatastoreType:
      description: Type of backend datastore
      type: string
      enum:
      - POSTGRES
      - ELASTICSEARCH
      - COLLECTORAPI
      examples:
      - ELASTICSEARCH
    EDivisiveDetectionConfig:
      type: object
      required:
      - builtIn
      - model
      properties:
        builtIn:
          type: boolean
          description: Built In
        model:
          type: string
          enum:
          - eDivisive
    ElasticsearchDatastoreConfig:
      description: Type of backend datastore
      type: object
      required:
      - authentication
      - builtIn
      - url
      properties:
        authentication:
          oneOf:
          - $ref: "#/components/schemas/NoAuth"
          - $ref: "#/components/schemas/APIKeyAuth"
          - $ref: "#/components/schemas/UsernamePassAuth"
          type: object
          discriminator:
            propertyName: type
            mapping:
              none: "#/components/schemas/NoAuth"
              api-key: "#/components/schemas/APIKeyAuth"
              username: "#/components/schemas/UsernamePassAuth"
        builtIn:
          type: boolean
          description: Built In
        url:
          type: string
          description: Elasticsearch url
    ErrorDetails:
      description: Validation Error Details
      type: object
      required:
      - type
      - message
      properties:
        type:
          type: string
          description: Validation Error type
        code:
          type: string
        path:
          type: string
        evaluationPath:
          type: string
        schemaPath:
          type: string
          deprecated: true
        schemaLocation:
          type: string
        instanceLocation:
          type: string
        property:
          type: string
        arguments:
          type: array
          items:
            type: string
        details:
          type: string
        messageKey:
          type: string
        valid:
          type: boolean
        message:
          type: string
    ExperimentComparison:
      type: object
      required:
      - model
      - config
      - variableId
      properties:
        model:
          type: string
          description: Name of comparison model
          examples:
          - relativeDifference
        config:
          type: string
          description: Model JSON configuration
        variableId:
          type: integer
          format: int32
          description: Variable ID to run experiment against
          examples:
          - 101
        variableName:
          type: string
          description: Variable Name to run experiment against
          examples:
          - Throughput
    ExperimentProfile:
      description: An Experiment Profile defines the labels and filters for the dataset
        and baseline
      type: object
      required:
      - id
      - name
      - selectorLabels
      - baselineLabels
      - comparisons
      properties:
        id:
          type: integer
          format: int32
          description: Experiment Profile unique ID
          examples:
          - 101
        name:
          type: string
          description: Name of Experiment Profile
          examples:
          - Techempower comparison
        testId:
          type: integer
          format: int32
          description: Test ID that Experiment Profile relates to
          examples:
          - 101
        selectorLabels:
          description: Array of selector labels
          type: array
          examples:
          - - Framework
          items:
            type: string
        selectorFilter:
          type: string
          description: Selector filter to apply to Selector label values
          examples:
          - value => value === 'quarkus-resteasy-reactive-hibernate-reactive'
        baselineLabels:
          description: Array of selector labels for comparison Baseline
          type: array
          examples:
          - - timestamp
          items:
            type: string
        baselineFilter:
          type: string
          description: Selector filter to apply to Baseline label values
          examples:
          - value => value === 1666955225547
        comparisons:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentComparison"
          description: Collection of Experiment Comparisons to run during an Experiment
            evaluation
        extraLabels:
          description: These labels are not used by Horreum but are added to the result
            event and therefore can be used e.g. when firing an Action.
          type: array
          items:
            type: string
    ExperimentResult:
      description: Result of running an Experiment
      type: object
      properties:
        profile:
          description: Experiment profile that results relates to
          type: object
          $ref: "#/components/schemas/ExperimentProfile"
        logs:
          type: array
          items:
            $ref: "#/components/schemas/DatasetLog"
          description: A list of log statements recorded while Experiment was evaluated
        datasetInfo:
          description: Dataset Info about dataset used for experiment
          type: object
          $ref: "#/components/schemas/DatasetInfo"
        baseline:
          type: array
          items:
            $ref: "#/components/schemas/DatasetInfo"
          description: A list of Dataset Info for experiment baseline(s)
        results:
          type: object
          additionalProperties:
            $ref: "#/components/schemas/ComparisonResult"
          description: A Map of all comparisons and results evaluated during an Experiment
        extraLabels:
          type: string
        notify:
          type: boolean
    ExportedLabelValues:
      description: A map of label names to label values with the associated datasetId
        and runId
      type: object
      properties:
        values:
          $ref: "#/components/schemas/LabelValueMap"
        runId:
          type: integer
          format: int32
          description: the run id that created the dataset
          examples:
          - 101
        datasetId:
          type: integer
          format: int32
          description: the unique dataset id
          examples:
          - 101
        start:
          type: string
          format: date-time
          examples:
          - 2019-09-26T07:58:30.996+0200
          description: Start timestamp
        stop:
          type: string
          format: date-time
          examples:
          - 2019-09-26T07:58:30.996+0200
          description: Stop timestamp
      required:
      - start
      - stop
    Extractor:
      description: "An Extractor defines how values are extracted from a JSON document,\
        \ for use in Labels etc."
      type: object
      required:
      - name
      - jsonpath
      - isarray
      properties:
        name:
          type: string
          description: Name of extractor. This name is used in Combination Functions
            to refer to values by name
          examples:
          - buildID
        jsonpath:
          type: string
          description: JSON path expression defining the location of the extractor
            value in the JSON document. This is a pSQL json path expression
          examples:
          - $.buildInfo.buildID
        isarray:
          type: boolean
          description: Does the JSON path expression reference an Array?
          examples:
          - false
    FingerprintValue:
      description: Representation of Fingerprint. If the Fingerprint has children
        the value will be null.
      type: object
      properties:
        name:
          type: string
          description: Fingerprint name
          examples:
          - Mode
        value:
          description: Fingerprint name
          examples:
          - Library
        children:
          type: array
          items:
            description: Cyclic reference to io.hyperfoil.tools.horreum.api.data.FingerprintValue
          description: List of Fingerprint children
    Fingerprints:
      description: A list of Fingerprints representing one dataset
      type: object
      properties:
        values:
          type: array
          items:
            $ref: "#/components/schemas/FingerprintValue"
    FixThresholdConfig:
      type: object
      required:
      - value
      - enabled
      - inclusive
      properties:
        value:
          description: Threshold Value
          type: integer
          examples:
          - 95
        enabled:
          type: boolean
          description: Threshold enabled/disabled
          examples:
          - true
        inclusive:
          type: boolean
          description: Is threshold inclusive of defined value?
          examples:
          - false
    FixedThresholdDetectionConfig:
      type: object
      required:
      - builtIn
      - model
      - min
      - max
      properties:
        builtIn:
          type: boolean
          description: Built In
        model:
          type: string
          enum:
          - fixedThreshold
        min:
          description: Lower bound for acceptable datapoint values
          type: object
          $ref: "#/components/schemas/FixThresholdConfig"
        max:
          description: Upper bound for acceptable datapoint values
          type: object
          $ref: "#/components/schemas/FixThresholdConfig"
    GithubIssueCommentActionConfig:
      type: object
      required:
      - type
      - issueUrl
      - owner
      - repo
      - issue
      - formatter
      properties:
        type:
          type: string
          description: Action type
        issueUrl:
          type: string
          description: GitHub issue URL
        owner:
          type: string
          description: GitHub repo owner
        repo:
          type: string
          description: GitHub repo name
        issue:
          type: string
          description: GitHub issue number
        formatter:
          type: string
          description: Object markdown formatter
    GithubIssueCreateActionConfig:
      type: object
      required:
      - type
      - owner
      - repo
      - title
      - formatter
      properties:
        type:
          type: string
          description: Action type
        owner:
          type: string
          description: GitHub repo owner
        repo:
          type: string
          description: GitHub repo name
        title:
          type: string
          description: GitHub issue title
        formatter:
          type: string
          description: Object markdown formatter
    HttpActionConfig:
      type: object
      required:
      - type
      - url
      properties:
        type:
          type: string
          description: Action type
        url:
          type: string
          description: HTTP address
    IndexedLabelValueMap:
      type: object
      additionalProperties:
        $ref: "#/components/schemas/LabelValueMap"
    KeyType:
      type: string
      enum:
      - USER
    KeycloakConfig:
      type: object
      properties:
        realm:
          type: string
          description: Keycloak realm securing Horreum instance
          examples:
          - horreum
        url:
          type: string
          description: URL of Keycloak instance securing Horreum
          examples:
          - https://horreum-keycloak.example.com
        clientId:
          type: string
          description: Keycloak client ID in Horreum realm for User Interface
          examples:
          - horreum-ui
    Label:
      description: "A Label is a core component of Horreum, defining which components\
        \ of the JSON document are part of a KPI and how the metric values are calculated"
      type: object
      required:
      - access
      - owner
      - id
      - name
      - extractors
      - filtering
      - metrics
      - schemaId
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique ID for Label
          examples:
          - 101
        name:
          type: string
          description: "Name for label. NOTE: all Labels are considered to have the\
            \ same semantic meaning throughout the entire system"
          examples:
          - Throughput
        extractors:
          type: array
          items:
            $ref: "#/components/schemas/Extractor"
          description: "A collection of Extractors, that will be combined in the Combination\
            \ Function"
        function:
          type: string
          description: A Combination Function that defines how values from Extractors
            are combined to produce a Label Value
          examples:
          - "value => { return ((value.reduce((a,b) => a+b))/value.length*1000).toFixed(3);\
            \ }"
        filtering:
          type: boolean
          description: Is Label a filtering label? Filtering labels contains values
            that are used to filter datasets for comparison
          examples:
          - true
        metrics:
          type: boolean
          description: Is Label a metrics label? Metrics labels are contain Metrics
            that are used for comparison
          examples:
          - true
        schemaId:
          type: integer
          format: int32
          description: Schema ID that the Label relates to
          examples:
          - 101
    LabelInFingerprint:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
    LabelInReport:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
        configId:
          type: integer
          format: int32
        title:
          type: string
        where:
          type: string
        name:
          type: string
    LabelInRule:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
        ruleId:
          type: integer
          format: int32
        ruleName:
          type: string
    LabelInVariable:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
        variableId:
          type: integer
          format: int32
        variableName:
          type: string
    LabelInView:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
        viewId:
          type: integer
          format: int32
        viewName:
          type: string
        componentId:
          type: integer
          format: int32
        header:
          type: string
    LabelInfo:
      type: object
      required:
      - name
      - metrics
      - filtering
      - schemas
      properties:
        name:
          type: string
          description: Label name
          examples:
          - buildID
        metrics:
          type: boolean
          description: Is label a metrics label?
          examples:
          - true
        filtering:
          type: boolean
          description: Is label a filtering label?
          examples:
          - false
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/SchemaDescriptor"
          description: List of schemas where label is referenced
    LabelLocation:
      type: object
      properties:
        type:
          type: string
          description: Location of Label usage
          examples:
          - VIEW
        testId:
          type: integer
          format: int32
          description: Unique ID for location that references Schema
          examples:
          - 101
        testName:
          type: string
          description: Test name that references Schema
          examples:
          - My Benchmark
    LabelPreview:
      description: Preview a Label Value derived from a Dataset Data. A preview allows
        users to apply a Label to a dataset and preview the Label Value result and
        processing errors in the UI
      type: object
      properties:
        value:
          type: string
          description: "Value value extracted from Dataset. This can be a scalar,\
            \ array or JSON object"
        output:
          type: string
          description: Description of errors occurred attempting to generate Label
            Value Preview
    LabelValue:
      description: Label Value derived from Label definition and Dataset Data
      type: object
      required:
      - id
      - name
      - schema
      properties:
        id:
          type: integer
          format: int32
          description: Unique ID for Label Value
          examples:
          - 101
        name:
          type: string
          description: Label name
          examples:
          - buildID
        schema:
          description: Summary description of Schema
          type: object
          $ref: "#/components/schemas/SchemaDescriptor"
        value:
          type: string
          description: "Value value extracted from Dataset. This can be a scalar,\
            \ array or JSON object"
          examples:
          - "1724"
    LabelValueMap:
      type: object
      description: a map of label name to value
      examples:
      - "{ \"[labelName]\": labelValue}"
    MissingDataRule:
      type: object
      required:
      - id
      - maxStaleness
      - testId
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        labels:
          type: array
          items:
            type: string
        condition:
          type: string
        maxStaleness:
          type: integer
          format: int64
        lastNotification:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        testId:
          type: integer
          format: int32
    NoAuth:
      type: object
      properties:
        type:
          type: string
          description: type
    PersistentLog:
      description: Persistent Log
      type: object
      required:
      - id
      - level
      - timestamp
      - message
      properties:
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        message:
          type: string
    PostgresDatastoreConfig:
      description: Built in backend datastore
      type: object
      required:
      - authentication
      - builtIn
      properties:
        authentication:
          oneOf:
          - $ref: "#/components/schemas/NoAuth"
          - $ref: "#/components/schemas/APIKeyAuth"
          - $ref: "#/components/schemas/UsernamePassAuth"
          type: object
          discriminator:
            propertyName: type
            mapping:
              none: "#/components/schemas/NoAuth"
              api-key: "#/components/schemas/APIKeyAuth"
              username: "#/components/schemas/UsernamePassAuth"
        builtIn:
          type: boolean
          description: Built In
    ProtectedTimeType:
      type: object
      required:
      - access
      - owner
      - start
      - stop
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
    ProtectedType:
      type: object
      required:
      - access
      - owner
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
    RecalculationStatus:
      type: object
      required:
      - timestamp
      - totalRuns
      - finished
      - datasets
      properties:
        timestamp:
          type: integer
          format: int64
          description: Recalculation timestamp
          examples:
          - 1698013206000
        totalRuns:
          type: integer
          format: int64
          description: Total number of Runs being recalculated
          examples:
          - 152
        finished:
          type: integer
          format: int64
          description: Total number of completed recalculations
          examples:
          - 93
        datasets:
          type: integer
          format: int64
          description: Total number of generated datasets
          examples:
          - 186
    RelativeDifferenceDetectionConfig:
      type: object
      required:
      - builtIn
      - model
      - filter
      - window
      - threshold
      - minPrevious
      properties:
        builtIn:
          type: boolean
          description: Built In
        model:
          type: string
          enum:
          - relativeDifference
        filter:
          type: string
          description: Relative Difference Detection filter
          examples:
          - mean
        window:
          type: integer
          format: int32
          description: Number of most recent datapoints used for aggregating the value
            for comparison.
          examples:
          - 5
        threshold:
          type: number
          format: double
          description: Maximum difference between the aggregated value of last <window>
            datapoints and the mean of preceding values.
          examples:
          - 0.2
        minPrevious:
          type: integer
          format: int32
          description: Minimal number of preceding datapoints
          examples:
          - 5
    ReportComponent:
      description: Report Component
      type: object
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        order:
          type: integer
          format: int32
        labels:
          description: Array of labels
          type: array
          examples:
          - - Framework
          items:
            type: string
        function:
          type: string
        unit:
          type: string
        reportId:
          type: integer
          format: int32
      required:
      - name
      - order
      - labels
    ReportLog:
      description: Report Log
      type: object
      required:
      - id
      - level
      - timestamp
      - message
      - reportId
      properties:
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        message:
          type: string
        reportId:
          type: integer
          format: int32
    Run:
      type: object
      required:
      - access
      - owner
      - start
      - stop
      - id
      - testid
      - data
      - trashed
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        id:
          type: integer
          format: int32
          description: Unique Run ID
          examples:
          - 101
        description:
          type: string
          description: Run description
          examples:
          - Run on AWS with m7g.large
        testid:
          type: integer
          format: int32
          description: Test ID run relates to
          examples:
          - 101
        data:
          description: Run result payload
          type: string
        metadata:
          description: "JSON metadata related to run, can be tool configuration etc"
          type: string
        trashed:
          type: boolean
          description: Has Run been deleted from UI
          examples:
          - false
        datasets:
          type: array
          items:
            $ref: "#/components/schemas/Dataset"
          description: Collection of Datasets derived from Run payload
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: Collection of Validation Errors in Run payload
    RunCount:
      type: object
      required:
      - total
      - active
      - trashed
      properties:
        total:
          type: integer
          format: int64
          description: Total count of Runs visible
          examples:
          - 100
        active:
          type: integer
          format: int64
          description: Total count of active Runs visible
          examples:
          - 95
        trashed:
          type: integer
          format: int64
          description: Total count of trashed Runs
          examples:
          - 5
    RunExtended:
      type: object
      required:
      - access
      - owner
      - start
      - stop
      - id
      - testid
      - data
      - trashed
      - schemas
      - testname
      - datasets
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        id:
          type: integer
          format: int32
          description: Unique Run ID
          examples:
          - 101
        description:
          type: string
          description: Run description
          examples:
          - Run on AWS with m7g.large
        testid:
          type: integer
          format: int32
          description: Test ID run relates to
          examples:
          - 101
        data:
          description: Run result payload
          type: string
        metadata:
          description: "JSON metadata related to run, can be tool configuration etc"
          type: string
        trashed:
          type: boolean
          description: Has Run been deleted from UI
          examples:
          - false
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: Collection of Validation Errors in Run payload
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/SchemaUsage"
          description: List of Schema Usages
        testname:
          type: string
          description: Test name run references
          examples:
          - My benchmark
        datasets:
          type: array
          items:
            type: integer
            format: int32
          description: List of DatasetIDs
          examples:
          - - 101
            - 102
            - 104
            - 106
    RunSummary:
      type: object
      required:
      - access
      - owner
      - start
      - stop
      - id
      - testid
      - testname
      - trashed
      - hasMetadata
      - datasets
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        start:
          description: Run Start timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        stop:
          description: Run Stop timestamp
          format: int64
          type: integer
          examples:
          - 1704965908267
        id:
          type: integer
          format: int32
          description: Run unique ID
          examples:
          - 202
        testid:
          type: integer
          format: int32
          description: test ID run relates to
          examples:
          - 101
        testname:
          type: string
          description: test ID run relates to
          examples:
          - My benchmark
        trashed:
          type: boolean
          description: has Run been trashed in the UI
          examples:
          - false
        hasMetadata:
          type: boolean
          description: does Run have metadata uploaded alongside Run data
          examples:
          - false
        description:
          type: string
          description: Run description
          examples:
          - Run on AWS with m7g.large
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/SchemaUsage"
          description: List of all Schema Usages for Run
        datasets:
          type: array
          items:
            type: integer
            format: int32
          description: Array of datasets ids
          examples:
          - - 101
            - 102
            - 103
        validationErrors:
          type: array
          items:
            $ref: "#/components/schemas/ValidationError"
          description: Array of validation errors
    RunsSummary:
      type: object
      required:
      - total
      - runs
      properties:
        total:
          type: integer
          format: int64
          description: Total count of Runs visible
          examples:
          - 1
        runs:
          type: array
          items:
            $ref: "#/components/schemas/RunSummary"
          description: List of Run Summaries
    Schema:
      description: Data object that describes the schema definition for a test
      type: object
      required:
      - access
      - owner
      - id
      - uri
      - name
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Schema ID
          examples:
          - 101
        uri:
          type: string
          description: "Unique, versioned schema URI"
          examples:
          - uri:my-schema:0.1
        name:
          type: string
          description: Schema name
          examples:
          - My benchmark schema
        description:
          type: string
          description: Schema Description
          examples:
          - Schema for processing my benchmark
        schema:
          type: string
          description: JSON validation schema. Used to validate uploaded JSON documents
          examples:
          - "{  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",  \"\
            $id\": \"https://example.com/product.schema.json\",  \"title\": \"Product\"\
            ,  \"description\": \"A product in the catalog\",  \"type\": \"object\"\
            }"
    SchemaDescriptor:
      type: object
      required:
      - id
      - name
      - uri
      properties:
        id:
          type: integer
          format: int32
          description: Schema unique ID
          examples:
          - 1
        name:
          type: string
          description: Schema name
          examples:
          - my-benchmark-schema
        uri:
          type: string
          description: Schema name
          examples:
          - uri:my-schmea:0.1
    SchemaExport:
      description: Represents a Schema with all associated data used for export/import
        operations.
      type: object
      required:
      - access
      - owner
      - id
      - uri
      - name
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Schema ID
          examples:
          - 101
        uri:
          type: string
          description: "Unique, versioned schema URI"
          examples:
          - uri:my-schema:0.1
        name:
          type: string
          description: Schema name
          examples:
          - My benchmark schema
        description:
          type: string
          description: Schema Description
          examples:
          - Schema for processing my benchmark
        schema:
          type: string
          description: JSON validation schema. Used to validate uploaded JSON documents
          examples:
          - "{  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",  \"\
            $id\": \"https://example.com/product.schema.json\",  \"title\": \"Product\"\
            ,  \"description\": \"A product in the catalog\",  \"type\": \"object\"\
            }"
        labels:
          type: array
          items:
            $ref: "#/components/schemas/Label"
          description: Array of Labels associated with schema
        transformers:
          type: array
          items:
            $ref: "#/components/schemas/Transformer"
          description: Array of Transformers associated with schema
    SchemaQueryResult:
      type: object
      required:
      - schemas
      - count
      properties:
        schemas:
          type: array
          items:
            $ref: "#/components/schemas/Schema"
          description: Array of Schemas
        count:
          type: integer
          format: int64
          description: Count of available Schemas. This is a count of Schemas that
            the current user has access to
          examples:
          - 64
    SchemaUsage:
      type: object
      required:
      - id
      - name
      - uri
      - source
      - type
      - hasJsonSchema
      properties:
        id:
          type: integer
          format: int32
          description: Schema unique ID
          examples:
          - 1
        name:
          type: string
          description: Schema name
          examples:
          - my-benchmark-schema
        uri:
          type: string
          description: Schema name
          examples:
          - uri:my-schmea:0.1
        source:
          type: integer
          format: int32
          description: "Source of schema usage, 0 is data, 1 is metadata. DataSets\
            \ always use 0"
          examples:
          - 1
        type:
          type: integer
          format: int32
          description: "Location of Schema Usage, 0 for Run, 1 for Dataset"
          examples:
          - 1
        key:
          type: string
          description: Ordinal position of schema usage in Run/Dataset
          examples:
          - "1"
        hasJsonSchema:
          type: boolean
          description: Does schema have a JSON validation schema defined?
          examples:
          - false
    SlackChannelMessageActionConfig:
      type: object
      required:
      - type
      - channel
      - formatter
      properties:
        type:
          type: string
          description: Action type
        channel:
          type: string
          description: Slack channel
        formatter:
          type: string
          description: Object markdown formatter
    SortDirection:
      type: string
      enum:
      - Ascending
      - Descending
    TableReport:
      description: Table Report
      type: object
      required:
      - id
      - config
      - created
      - comments
      - data
      - logs
      properties:
        id:
          type: integer
          format: int32
        config:
          description: Table Report Config
          type: object
          $ref: "#/components/schemas/TableReportConfig"
        created:
          type: string
          format: date-time
          examples:
          - 2019-09-26T07:58:30.996+0200
          description: Created timestamp
        comments:
          description: List of ReportComments
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int32
              level:
                type: integer
                format: int32
              category:
                type: string
              componentId:
                type: integer
                format: int32
              comment:
                type: string
            required:
            - level
            - comment
        data:
          description: List of TableReportData
          type: array
          items:
            description: Table Report Data
            type: object
            required:
            - datasetId
            - runId
            - ordinal
            - category
            - series
            - scale
            - values
            properties:
              datasetId:
                type: integer
                format: int32
              runId:
                type: integer
                format: int32
              ordinal:
                type: integer
                format: int32
              category:
                type: string
              series:
                type: string
              scale:
                type: string
              values:
                description: Array of values
                type: array
                items:
                  type: number
        logs:
          description: List of ReportLogs
          type: array
          items:
            description: Report Log
            type: object
            required:
            - id
            - level
            - timestamp
            - message
            - reportId
            properties:
              id:
                type: integer
                format: int64
              level:
                type: integer
                format: int32
              timestamp:
                type: string
                format: date-time
                examples:
                - 2022-03-10T16:15:50Z
              message:
                type: string
              reportId:
                type: integer
                format: int32
    TableReportConfig:
      type: object
      description: Table Report Config
      required:
      - id
      - title
      - seriesLabels
      - components
      properties:
        id:
          type: integer
          format: int32
        title:
          type: string
        test:
          $ref: "#/components/schemas/Test"
        filterLabels:
          description: ArrayNode of filter labels
          type: array
          items:
            type: string
        filterFunction:
          type: string
        categoryLabels:
          description: ArrayNode of category labels
          type: array
          items:
            type: string
        categoryFunction:
          type: string
        categoryFormatter:
          type: string
        seriesLabels:
          description: ArrayNode of series labels
          type: array
          items:
            type: string
        seriesFunction:
          type: string
        seriesFormatter:
          type: string
        scaleLabels:
          description: ArrayNode of filter labels
          type: array
          items:
            type: string
        scaleFunction:
          type: string
        scaleFormatter:
          type: string
        scaleDescription:
          type: string
        components:
          description: List of ReportComponents
          type: array
          items:
            description: Report Component
            type: object
            properties:
              id:
                type: integer
                format: int32
              name:
                type: string
              order:
                type: integer
                format: int32
              labels:
                description: Array of labels
                type: array
                examples:
                - - Framework
                items:
                  type: string
              function:
                type: string
              unit:
                type: string
              reportId:
                type: integer
                format: int32
            required:
            - name
            - order
            - labels
    TableReportData:
      description: Table Report Data
      type: object
      required:
      - datasetId
      - runId
      - ordinal
      - category
      - series
      - scale
      - values
      properties:
        datasetId:
          type: integer
          format: int32
        runId:
          type: integer
          format: int32
        ordinal:
          type: integer
          format: int32
        category:
          type: string
        series:
          type: string
        scale:
          type: string
        values:
          description: Array of values
          type: array
          items:
            type: number
    Target:
      description: Change's target
      type: object
      properties:
        target:
          type: string
          description: "concatenated simicolons varibleID;{fingeprintJson}"
        type:
          type: string
        refId:
          type: string
        data:
          type: string
        payload:
          type: object
    Test:
      description: Represents a Test. Tests are typically equivalent to a particular
        benchmark
      type: object
      required:
      - access
      - owner
      - id
      - name
      - datastoreId
      - notificationsEnabled
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Test id
          examples:
          - 101
        name:
          type: string
          description: Test name
          examples:
          - my-comprehensive-benchmark
        folder:
          type: string
          description: Name of folder that the test is stored in. Folders allow tests
            to be organised in the UI
          examples:
          - My Team Folder
        description:
          type: string
          description: Description of the test
          examples:
          - Comprehensive benchmark to tests the limits of any system it is run against
        datastoreId:
          type: integer
          format: int32
          description: backend ID for backing datastore
        timelineLabels:
          description: List of label names that are used for determining metric to
            use as the time series
          type: array
          examples:
          - - timestamp
          items:
            type: string
        timelineFunction:
          type: string
          description: Label function to modify timeline labels to a produce a value
            used for ordering datapoints
          examples:
          - timestamp => timestamp
        fingerprintLabels:
          description: 'Array of Label names that are used to create a fingerprint '
          type: array
          examples:
          - - build_tag
          items:
            type: string
        fingerprintFilter:
          type: string
          description: Filter function to filter out datasets that are comparable
            for the purpose of change detection
          examples:
          - value => value === "true"
        compareUrl:
          type: string
          description: URL to external service that can be called to compare runs.  This
            is typically an external reporting/visulization service
          examples:
          - "(ids, token) => 'http://repoting.example.com/report/specj?q=' + ids.join('&q=')\
            \ + \"&token=\"+token"
        transformers:
          type: array
          items:
            $ref: "#/components/schemas/Transformer"
          description: Array for transformers defined for the Test
        notificationsEnabled:
          type: boolean
          description: Are notifications enabled for the test
          examples:
          - true
    TestExport:
      description: Represents a Test with all associated data used for export/import
        operations.
      type: object
      required:
      - access
      - owner
      - id
      - name
      - datastoreId
      - notificationsEnabled
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Test id
          examples:
          - 101
        name:
          type: string
          description: Test name
          examples:
          - my-comprehensive-benchmark
        folder:
          type: string
          description: Name of folder that the test is stored in. Folders allow tests
            to be organised in the UI
          examples:
          - My Team Folder
        description:
          type: string
          description: Description of the test
          examples:
          - Comprehensive benchmark to tests the limits of any system it is run against
        datastoreId:
          type: integer
          format: int32
          description: backend ID for backing datastore
        timelineLabels:
          description: List of label names that are used for determining metric to
            use as the time series
          type: array
          examples:
          - - timestamp
          items:
            type: string
        timelineFunction:
          type: string
          description: Label function to modify timeline labels to a produce a value
            used for ordering datapoints
          examples:
          - timestamp => timestamp
        fingerprintLabels:
          description: 'Array of Label names that are used to create a fingerprint '
          type: array
          examples:
          - - build_tag
          items:
            type: string
        fingerprintFilter:
          type: string
          description: Filter function to filter out datasets that are comparable
            for the purpose of change detection
          examples:
          - value => value === "true"
        compareUrl:
          type: string
          description: URL to external service that can be called to compare runs.  This
            is typically an external reporting/visulization service
          examples:
          - "(ids, token) => 'http://repoting.example.com/report/specj?q=' + ids.join('&q=')\
            \ + \"&token=\"+token"
        transformers:
          type: array
          items:
            $ref: "#/components/schemas/Transformer"
          description: Array for transformers defined for the Test
        notificationsEnabled:
          type: boolean
          description: Are notifications enabled for the test
          examples:
          - true
        variables:
          type: array
          items:
            $ref: "#/components/schemas/Variable"
          description: Array of Variables associated with test
        missingDataRules:
          type: array
          items:
            $ref: "#/components/schemas/MissingDataRule"
          description: Array of MissingDataRules associated with test
        experiments:
          type: array
          items:
            $ref: "#/components/schemas/ExperimentProfile"
          description: Array of ExperimentProfiles associated with test
        actions:
          type: array
          items:
            $ref: "#/components/schemas/Action"
          description: Array of Actions associated with test
        subscriptions:
          description: Watcher object associated with test
          type: object
          $ref: "#/components/schemas/Watch"
        datastore:
          description: Datastore associated with test
          type: object
          $ref: "#/components/schemas/Datastore"
    TestListing:
      type: object
      required:
      - tests
      - count
      properties:
        tests:
          type: array
          items:
            $ref: "#/components/schemas/TestSummary"
          description: Array of Test Summaries
        count:
          type: integer
          format: int64
          description: Number of tests when pagination is ignored
    TestQueryResult:
      type: object
      required:
      - tests
      - count
      properties:
        tests:
          type: array
          items:
            $ref: "#/components/schemas/Test"
          description: Array of Tests
        count:
          type: integer
          format: int64
          description: Count of available tests. This is a count of tests that the
            current user has access to
          examples:
          - 64
    TestSummary:
      type: object
      required:
      - access
      - owner
      - id
      - name
      - datastoreId
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: ID of tests
          examples:
          - 101
        name:
          type: string
          description: Test name
          examples:
          - my-comprehensive-benchmark
        folder:
          type: string
          description: Name of folder that the test is stored in. Folders allow tests
            to be organised in the UI
          examples:
          - My Team Folder
        description:
          type: string
          description: Description of the test
          examples:
          - Comprehensive benchmark to tests the limits of any system it is run against
        datasets:
          type: number
          description: Total number of Datasets for the Test
          examples:
          - 202
        runs:
          type: number
          description: Total number of Runs for the Test
          examples:
          - 101
        watching:
          type: array
          uniqueItems: true
          items:
            type: string
          description: Subscriptions for each test for authenticated user
          examples:
          - []
        datastoreId:
          type: integer
          format: int32
          description: Datastore id
          examples:
          - 1
    TransformationLog:
      description: Transformation Log
      type: object
      required:
      - id
      - level
      - timestamp
      - message
      properties:
        id:
          type: integer
          format: int64
        level:
          type: integer
          format: int32
        timestamp:
          type: string
          format: date-time
          examples:
          - 2022-03-10T16:15:50Z
        message:
          type: string
        testId:
          type: integer
          format: int32
        runId:
          type: integer
          format: int32
    Transformer:
      type: object
      description: A transformer extracts labals and applies a Function to convert
        a Run into one or more Datasets
      required:
      - access
      - owner
      - id
      - name
      - extractors
      - schemaId
      - schemaUri
      - schemaName
      properties:
        access:
          description: Access rights for the test. This defines the visibility of
            the Test in the UI
          type: string
          enum:
          - PUBLIC
          - PROTECTED
          - PRIVATE
          examples:
          - PUBLIC
        owner:
          type: string
          description: Name of the team that owns the test. Users must belong to the
            team that owns a test to make modifications
          examples:
          - performance-team
        id:
          type: integer
          format: int32
          description: Unique Transformer id
          examples:
          - 101
        name:
          type: string
          description: Transformer name
          examples:
          - normalize-techempower-result
        description:
          type: string
          description: Transformer description
          examples:
          - Normalizers a techempower output file to separate each framework into
            a dataset and normalize the JSON structure
        targetSchemaUri:
          type: string
          description: "The schema associated with the calculated Datasets. Where\
            \ a transformer creates a new JSON object with a new structure, this Schema\
            \ is used to extafct values from the new Dataset JSON document"
          examples:
          - uri:normalized-techempower:0.1
        extractors:
          type: array
          items:
            $ref: "#/components/schemas/Extractor"
          description: A collection of extractors to extract JSON values to create
            new Dataset JSON document
        function:
          type: string
        schemaId:
          type: integer
          format: int32
          description: Schema ID that the transform is registered against
          examples:
          - 101
        schemaUri:
          type: string
          description: Schema Uri that the transform is registered against
          examples:
          - urn:techempower:0.1
        schemaName:
          type: string
          description: Schema name that the transform is registered against
          examples:
          - techempower
    TransformerInfo:
      type: object
      required:
      - schemaId
      - schemaUri
      - schemaName
      - transformerId
      - transformerName
      properties:
        schemaId:
          type: integer
          format: int32
          description: Schema ID
          examples:
          - 101
        schemaUri:
          type: string
          description: Schema uri
          examples:
          - uri:my-schema:0.1
        schemaName:
          type: string
          description: Schema name
          examples:
          - my-benchmark-schema
        transformerId:
          type: integer
          format: int32
          description: Transformer ID
          examples:
          - 201
        transformerName:
          type: string
          description: Transformer name
          examples:
          - my-dataset-transformer
    TypeConfig:
      type: object
      properties:
        enumName:
          type: string
        name:
          type: string
        label:
          type: string
        supportedAuths:
          type: array
          items:
            type: string
        builtIn:
          type: boolean
    UserData:
      type: object
      required:
      - id
      - username
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
    UsernamePassAuth:
      type: object
      properties:
        type:
          type: string
          description: type
        username:
          type: string
          description: Username
        password:
          type: string
          description: Password
    ValidationError:
      type: object
      description: Schema validation error
      required:
      - schemaId
      - error
      properties:
        schemaId:
          type: integer
          format: int32
          description: Schema ID that Validation Error relates to
          examples:
          - 101
        error:
          description: Validation Error Details
          type: object
          required:
          - type
          - message
          properties:
            type:
              type: string
              description: Validation Error type
            code:
              type: string
            path:
              type: string
            evaluationPath:
              type: string
            schemaPath:
              type: string
              deprecated: true
            schemaLocation:
              type: string
            instanceLocation:
              type: string
            property:
              type: string
            arguments:
              type: array
              items:
                type: string
            details:
              type: string
            messageKey:
              type: string
            valid:
              type: boolean
            message:
              type: string
    Variable:
      type: object
      required:
      - id
      - testId
      - name
      - order
      - labels
      - changeDetection
      properties:
        id:
          type: integer
          format: int32
        testId:
          type: integer
          format: int32
        name:
          type: string
        group:
          type: string
        order:
          type: integer
          format: int32
        labels:
          type: array
          items:
            type: string
        calculation:
          type: string
        changeDetection:
          type: array
          items:
            $ref: "#/components/schemas/ChangeDetection"
    VersionInfo:
      type: object
      required:
      - version
      - startTimestamp
      properties:
        version:
          type: string
          description: Version of Horreum
          examples:
          - 0.9.4
        startTimestamp:
          type: integer
          format: int64
          description: Timestamp of server startup
          examples:
          - 2023-10-18 18:00:57
        privacyStatement:
          type: string
          description: Privacy statement
          examples:
          - link/to/external/privacy/statement
    ViewComponent:
      description: Single view component
      type: object
      required:
      - id
      - headerOrder
      - headerName
      - labels
      properties:
        id:
          type: integer
          format: int32
        headerOrder:
          type: integer
          format: int32
        headerName:
          type: string
        labels:
          type: array
          items:
            type: string
        render:
          type: string
    Watch:
      type: object
      properties:
        id:
          type: integer
          format: int32
        users:
          type: array
          items:
            type: string
        optout:
          type: array
          items:
            type: string
        teams:
          type: array
          items:
            type: string
        testId:
          type: integer
          format: int32
      required:
      - users
      - optout
      - teams
      - testId
tags:
- name: Config
  description: Endpoint providing configuration for the Horreum System
  x-smallrye-profile-external: ""
- name: Dataset
  description: Datasets are used as the basis for all change detection and reporting
  x-smallrye-profile-external: ""
- name: Experiment
  description: Experiments allow users to apply change detection rules to two different
    datasets. This allows for pass/fail of KPIS based on A/B testing
  x-smallrye-profile-external: ""
- name: Run
  description: Manage test runs. Runs are instances of results of a benchmark execution
  x-smallrye-profile-external: ""
- name: Schema
  description: Manage schemas
  x-smallrye-profile-external: ""
- name: Test
  description: Endpoint giving access to tests defined in Horreum.
  x-smallrye-profile-external: ""
- name: User
  description: Manage user accounts
  x-smallrye-profile-external: ""
paths:
  /api/config/datastore:
    put:
      description: Update an existing Datastore definition
      operationId: updateDatastore
      tags:
      - Config
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Datastore"
        required: true
      responses:
        "200":
          description: The ID of the updated Datastore
          content:
            application/json:
              schema:
                type: integer
                format: int32
    post:
      description: Create a new Datastore
      operationId: newDatastore
      tags:
      - Config
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Datastore"
        required: true
      responses:
        "200":
          description: The ID for the new Datastore
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /api/config/datastore/types:
    get:
      description: Obtain list of available datastore types
      operationId: datastoreTypes
      tags:
      - Config
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TypeConfig"
  /api/config/datastore/{id}:
    delete:
      description: Test a Datastore
      operationId: deleteDatastore
      tags:
      - Config
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/config/datastore/{id}/test:
    get:
      description: Test a Datastore connection
      operationId: testDatastore
      tags:
      - Config
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatastoreTestResponse"
  /api/config/datastore/{team}:
    get:
      description: Obtain list of configured datastores for particular team
      operationId: datastores
      tags:
      - Config
      parameters:
      - description: name of the team to search for defined datastores
        example: perf-team
        name: team
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Datastore"
  /api/config/keycloak:
    get:
      description: Obtain configuration information about keycloak server securing
        Horreum instance
      operationId: keycloak
      tags:
      - Config
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/KeycloakConfig"
  /api/config/version:
    get:
      description: Obtain version of the running Horreum instance
      operationId: version
      tags:
      - Config
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VersionInfo"
  /api/dataset/bySchema:
    get:
      description: "Retrieve a paginated list of Datasets, with total count, by Schema"
      operationId: listDatasetsBySchema
      tags:
      - Dataset
      parameters:
      - description: Schema URI
        example: uri:techempower:0.1
        name: uri
        required: true
        in: query
        schema:
          type: string
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Schemas
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
          default: start
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetList"
  /api/dataset/list/{testId}:
    get:
      description: "Retrieve a paginated list of Datasets, with total count, by Test"
      operationId: listByTest
      tags:
      - Dataset
      parameters:
      - description: Test ID of test to retrieve list of Datasets
        example: 101
        name: testId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: JOSN Filter expression to apply to query
        example: "{\"buildID\":111111}"
        name: filter
        in: query
        schema:
          type: string
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Schemas
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      - description: Optional View ID to filter datasets by view
        example: 202
        name: viewId
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetList"
  /api/dataset/{datasetId}/labelValues:
    get:
      operationId: getDatasetLabelValues
      tags:
      - Dataset
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LabelValue"
  /api/dataset/{datasetId}/previewLabel:
    post:
      operationId: previewLabel
      tags:
      - Dataset
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LabelPreview"
  /api/dataset/{datasetId}/summary:
    get:
      operationId: getDatasetSummary
      tags:
      - Dataset
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - name: viewId
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DatasetSummary"
  /api/dataset/{id}:
    get:
      description: Retrieve Dataset by ID
      operationId: getDataset
      tags:
      - Dataset
      parameters:
      - description: Dataset ID to retrieve
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No Dataset with the given id was found
          content:
            application/json: {}
        "200":
          description: JVM system properties of a particular host.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Dataset"
  /api/experiment/models:
    get:
      description: Retrieve a list of Condition Config models
      operationId: models
      tags:
      - Experiment
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ConditionConfig"
  /api/experiment/run:
    get:
      description: Run an experiment for a given dataset and experiment profile
      operationId: runExperiments
      tags:
      - Experiment
      parameters:
      - description: The dataset to run the experiment on
        example: 101
        name: datasetId
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Array of experiment results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExperimentResult"
  /api/experiment/{testId}/profiles:
    get:
      description: Retrieve Experiment Profiles by Test ID
      operationId: profiles
      tags:
      - Experiment
      parameters:
      - description: Test ID to retrieve Experiment Profiles for
        example: 101
        name: testId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExperimentProfile"
    post:
      description: 'Save new or update existing Experiment Profiles for a Test '
      operationId: addOrUpdateProfile
      tags:
      - Experiment
      parameters:
      - description: Test ID to retrieve Experiment Profiles for
        example: 101
        name: testId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExperimentProfile"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /api/experiment/{testId}/profiles/{profileId}:
    delete:
      description: Delete an Experiment Profiles for a Test
      operationId: deleteProfile
      tags:
      - Experiment
      parameters:
      - description: Test ID
        example: 101
        name: testId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: Experiment Profile ID
        example: 202
        name: profileId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/run/autocomplete:
    get:
      operationId: autocomplete
      tags:
      - Run
      parameters:
      - description: JSONPath to be autocompleted
        example: $.
        name: query
        required: true
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/run/bySchema:
    get:
      description: Retrieve a paginated list of Runs with available count for a given
        Schema URI
      operationId: listRunsBySchema
      tags:
      - Run
      parameters:
      - description: Schema URI
        example: uri:my-schema:0.1
        name: uri
        required: true
        in: query
        schema:
          type: string
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Tests
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsSummary"
  /api/run/count:
    get:
      description: Run count summary for given Test ID
      operationId: runCount
      tags:
      - Run
      parameters:
      - description: Test ID
        example: 101
        name: testId
        required: true
        in: query
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunCount"
  /api/run/data:
    post:
      description: Upload a new Run
      operationId: addRunFromData
      tags:
      - Run
      parameters:
      - description: "start timestamp of run, or json path expression"
        examples:
          scalar value:
            value: 2023-10-23T00:13:35Z
          json path:
            value: $.buildTimeStamp
        name: start
        required: true
        in: query
        schema:
          type: string
      - description: "stop timestamp of run, or json path expression"
        examples:
          scalar value:
            value: 2023-10-23T00:13:35Z
          json path:
            value: $.buildTimeStamp
        name: stop
        required: true
        in: query
        schema:
          type: string
      - description: test name of ID
        example: my-benchmark
        name: test
        required: true
        in: query
        schema:
          type: string
      - description: Name of the new owner
        example: perf-team
        name: owner
        in: query
        schema:
          type: string
      - description: New Access level
        example: "0"
        name: access
        in: query
        schema:
          $ref: "#/components/schemas/Access"
      - description: Schema URI
        example: uri:my-benchmark:0.2
        in: query
        name: schema
        schema:
          type: string
      - description: Run description
        example: AWS runs
        name: description
        in: query
        schema:
          type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "202":
          description: "The request has been accepted for processing. Returns a list\
            \ of created run IDs if available, or an empty list if processing is still\
            \ ongoing. Label values and change detection processing is performed asynchronously."
          content:
            text/plain:
              example: "101,102,103"
              schema:
                type: string
                examples:
                - "101,102,103"
        "204":
          description: Data is valid but no run was created
          content:
            text/plain: {}
        "400":
          description: Some fields are missing or invalid
          content:
            text/plain: {}
  /api/run/list:
    get:
      description: Retrieve a paginated list of Runs with available count
      operationId: listAllRuns
      tags:
      - Run
      parameters:
      - description: query string to filter runs
        example: $.*
        name: query
        in: query
        schema:
          type: string
      - description: match all Runs?
        example: false
        name: matchAll
        in: query
        schema:
          type: boolean
      - description: "__my, __all or a comma delimited  list of roles"
        example: __my
        name: roles
        in: query
        schema:
          type: string
      - description: show trashed runs
        example: false
        name: trashed
        in: query
        schema:
          type: boolean
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Tests
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsSummary"
  /api/run/list/{testId}:
    get:
      description: Retrieve a paginated list of Runs with available count for a given
        Test ID
      operationId: listTestRuns
      tags:
      - Run
      parameters:
      - description: Test ID
        example: 101
        name: testId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: include trashed runs
        example: false
        name: trashed
        in: query
        schema:
          type: boolean
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Tests
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunsSummary"
  /api/run/recalculateAll:
    post:
      description: Recalculate Datasets for Runs between two dates
      operationId: recalculateAll
      tags:
      - Run
      parameters:
      - description: start timestamp
        example: "1698013206000"
        name: from
        in: query
        schema:
          type: string
      - description: end timestamp
        example: "1698013206000"
        name: to
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/run/test:
    post:
      description: Upload a new Run
      operationId: addRun
      tags:
      - Run
      parameters:
      - description: test name of ID
        example: my-benchmark
        name: test
        in: query
        schema:
          type: string
      - description: Name of the new owner
        example: perf-team
        name: owner
        in: query
        schema:
          type: string
      - description: New Access level
        example: "0"
        name: access
        in: query
        schema:
          $ref: "#/components/schemas/Access"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Run"
        required: true
      responses:
        "202":
          description: "The request has been accepted for processing. Returns a list\
            \ of created run IDs if available, or an empty list if processing is still\
            \ ongoing. Label values and change detection processing is performed asynchronously."
          content:
            application/json:
              example:
              - 101
              - 102
              - 103
              schema:
                type: array
                examples:
                - - 101
                  - 102
                  - 103
                items:
                  type: integer
                  format: int32
        "400":
          description: Some fields are missing or invalid
          content:
            application/json: {}
  /api/run/{id}:
    get:
      description: Get extended Run information by Run ID
      operationId: getRun
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 202
        in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: If no Run have been found with the given id
          content:
            application/json: {}
        "200":
          description: Run data with the referenced schemas and generated datasets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunExtended"
  /api/run/{id}/data:
    get:
      description: Get Run data by Run ID
      operationId: getData
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 202
        in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      - description: FIlter by Schmea URI
        example: uri:my-benchmark:0.1
        in: query
        name: schemaUri
        schema:
          type: string
      responses:
        "200":
          description: Run payload
          content:
            application/json:
              example: "{ \"buildID\": 1709, ...}"
              schema:
                type: object
  /api/run/{id}/description:
    post:
      description: Update Run description
      operationId: updateDescription
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "201":
          description: Created
  /api/run/{id}/labelValues:
    get:
      description: Get all the label values for the run
      operationId: getRunLabelValues
      tags:
      - Run
      parameters:
      - description: Run Id
        example: 101
        in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      - description: either a required json sub-document or path expression
        examples:
          object:
            description: json object that must exist in the values object
            value: "{labelName:necessaryValue,...}"
          string:
            description: valid filtering jsonpath that returns null if not found (not
              predicates)
            value: $.count ? (@ < 20 && @ > 10)
        name: filter
        in: query
        schema:
          type: string
          default: "{}"
      - description: label name for sorting
        name: sort
        in: query
        schema:
          type: string
          default: ""
      - description: either Ascending or Descending
        example: count
        name: direction
        in: query
        schema:
          type: string
          default: Ascending
      - description: the maximum number of results to include
        example: 10
        name: limit
        in: query
        schema:
          type: integer
          format: int32
          default: 2147483647
      - description: which page to skip to when using a limit
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - description: label name(s) to include in the result as scalar or comma separated
        examples:
          single:
            description: including a single label
            value: id
          multiple:
            description: including multiple labels
            value: "id,count"
        name: include
        in: query
        schema:
          type: array
          items:
            type: string
      - description: label name(s) to exclude from the result as scalar or comma separated
        examples:
          single:
            description: excluding a single label
            value: id
          multiple:
            description: excluding multiple labels
            value: "id,count"
        name: exclude
        in: query
        schema:
          type: array
          items:
            type: string
      - description: enable filtering for multiple values with an array of values
        example: true
        name: multiFilter
        in: query
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: label Values
          content:
            application/json:
              example: "[ { \"datasetId\" : 101, \"runId\": 201, \"values\" : { [labelName]\
                \ : labelValue } },...]"
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExportedLabelValues"
  /api/run/{id}/metadata:
    get:
      description: Get Run  meta data by Run ID
      operationId: getMetadata
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 202
        in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      - description: Filter by Schmea URI
        example: uri:my-benchmark:0.1
        in: query
        name: schemaUri
        schema:
          type: string
      responses:
        "200":
          description: Run payload
          content:
            application/json:
              example: "{ \"metaDataID\": 1709, ...}"
              schema:
                type: object
  /api/run/{id}/recalculate:
    post:
      description: Recalculate Datasets for Run
      operationId: recalculateRunDatasets
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Array of generated Datasets
          content:
            application/json:
              example:
              - 101
              - 102
              - 103
              schema:
                type: array
                items:
                  type: integer
                  format: int32
  /api/run/{id}/schema:
    post:
      description: Update Run schema for part of JSON data
      operationId: updateRunSchema
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: JSON path expression to update schema
        example: $.schemaURI
        name: path
        in: query
        schema:
          type: string
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: string
  /api/run/{id}/summary:
    get:
      description: Get Run Summary information by Run ID
      operationId: getRunSummary
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 202
        in: path
        name: id
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: If no Run have been found with the given id
          content:
            application/json: {}
        "200":
          description: Run summary with the referenced schemas and generated datasets
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RunSummary"
  /api/run/{id}/trash:
    post:
      description: Trash a Run with a given ID
      operationId: trash
      tags:
      - Run
      parameters:
      - description: Run ID
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: should run be trashed?
        example: true
        name: isTrashed
        in: query
        schema:
          type: boolean
      responses:
        "201":
          description: Created
  /api/run/{id}/updateAccess:
    post:
      description: Update the Access configuration for a Run
      operationId: updateRunAccess
      tags:
      - Run
      parameters:
      - description: Run ID to update Access
        example: 101
        name: id
        required: true
        in: path
        schema:
          type: integer
          format: int32
      - description: Name of the new owner
        example: perf-team
        name: owner
        required: true
        in: query
        schema:
          type: string
      - description: New Access level
        example: "0"
        name: access
        required: true
        in: query
        schema:
          $ref: "#/components/schemas/Access"
      responses:
        "201":
          description: Created
  /api/schema:
    put:
      description: Update an existing Schema
      operationId: updateSchema
      tags:
      - Schema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schema"
        required: true
      responses:
        "200":
          description: Schema updated successfully
          content:
            application/json:
              example: 103
              schema:
                type: integer
                format: int32
    get:
      description: Retrieve a paginated list of Schemas with available count
      operationId: listSchemas
      tags:
      - Schema
      parameters:
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Schemas
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          $ref: "#/components/schemas/SortDirection"
      - description: "__my, __all or a comma delimited  list of roles"
        example: __my
        name: roles
        in: query
        schema:
          type: string
      - name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaQueryResult"
    post:
      description: Save a new Schema
      operationId: addSchema
      tags:
      - Schema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Schema"
        required: true
      responses:
        "201":
          description: New schema created successfully
          content:
            application/json:
              example: 103
              schema:
                type: integer
                format: int32
  /api/schema/allLabels:
    get:
      description: Retrieve list of Labels for ny name. Allows users to retrieve all
        Label Definitions that have the same name
      operationId: allLabels
      tags:
      - Schema
      parameters:
      - description: Label name
        example: buildID
        name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LabelInfo"
  /api/schema/allTransformers:
    get:
      description: Retrieve all transformers
      operationId: allTransformers
      tags:
      - Schema
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TransformerInfo"
  /api/schema/descriptors:
    get:
      description: Retrieve a list of Schema Descriptors
      operationId: descriptors
      tags:
      - Schema
      parameters:
      - description: Limit to a single Schema by ID
        example: 102
        name: id
        in: query
        schema:
          type: array
          items:
            type: integer
            format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SchemaDescriptor"
  /api/schema/findUsages:
    get:
      description: Find all usages of a Schema by label name
      operationId: findUsages
      tags:
      - Schema
      parameters:
      - description: Name of label to search for
        example: Throughput
        name: label
        required: true
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LabelLocation"
  /api/schema/idByUri/{uri}:
    get:
      description: Retrieve Schema ID by uri
      operationId: idByUri
      tags:
      - Schema
      parameters:
      - description: Schema uri
        example: uri:my-schema:0.1
        name: uri
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              example: 101
              schema:
                type: integer
                format: int32
  /api/schema/import:
    put:
      description: Update an existing Schema using its previously exported version
      operationId: updateSchemaWithImport
      tags:
      - Schema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaExport"
        required: true
      responses:
        "200":
          description: Schema updated successfully using previously exported one
          content:
            application/json:
              schema:
                type: integer
                format: int32
    post:
      description: Import a previously exported Schema as a new Schema
      operationId: addSchemaWithImport
      tags:
      - Schema
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SchemaExport"
        required: true
      responses:
        "201":
          description: New Schema created successfully using previously exported one
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /api/schema/{id}:
    get:
      description: Retrieve Schema by ID
      operationId: getSchema
      tags:
      - Schema
      parameters:
      - description: Schema ID to retrieve
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No Schema with the given id was found
          content:
            application/json: {}
        "200":
          description: Returns Schema if a matching id is found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Schema"
    delete:
      description: Delete a Schema by id
      operationId: deleteSchema
      tags:
      - Schema
      parameters:
      - description: Schema ID to delete
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/schema/{id}/export:
    get:
      description: Export a Schema
      operationId: exportSchema
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: A JSON representation of the SchemaExport object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchemaExport"
  /api/schema/{id}/updateAccess:
    post:
      description: Update the Access configuration for a Schema
      operationId: updateSchemaAccess
      tags:
      - Schema
      parameters:
      - description: Schema ID to update Access
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: Name of the new owner
        example: perf-team
        name: owner
        required: true
        in: query
        schema:
          type: string
      - description: New Access level
        example: "0"
        name: access
        required: true
        in: query
        schema:
          $ref: "#/components/schemas/Access"
      responses:
        "201":
          description: Created
  /api/schema/{schemaId}/labels:
    put:
      description: Update existing Label for a Schema (Label id only required when
        updating existing one)
      operationId: updateLabel
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
      responses:
        "200":
          description: Schema updated successfully
          content:
            application/json:
              schema:
                type: integer
                format: int32
    get:
      description: Retrieve list of Labels for a Schema by Schema ID
      operationId: labels
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Label"
    post:
      description: Save new or update existing Label for a Schema (Label id only required
        when updating existing one)
      operationId: addLabel
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Label"
      responses:
        "201":
          description: New schema created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /api/schema/{schemaId}/labels/{labelId}:
    delete:
      description: Delete existing Label from a Schema
      operationId: deleteLabel
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: Label ID
        example: 202
        name: labelId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/schema/{schemaId}/transformers:
    put:
      description: Save new or update existing Transformer definition
      operationId: updateTransformer
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transformer"
      responses:
        "200":
          description: Transformer updated successfully
          content:
            application/json:
              schema:
                type: integer
                format: int32
    get:
      description: List all Transformers defined for a Schema
      operationId: listTransformers
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Transformer"
    post:
      description: Save new or update existing Transformer definition
      operationId: addTransformer
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Transformer"
      responses:
        "201":
          description: New transformer created successfully
          content:
            application/json:
              schema:
                type: integer
                format: int32
  /api/schema/{schemaId}/transformers/{transformerId}:
    delete:
      description: Delete a Transformer defined for a Schema
      operationId: deleteTransformer
      tags:
      - Schema
      parameters:
      - description: Schema ID
        example: 101
        name: schemaId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: Transformer ID
        example: 202
        name: transformerId
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/test:
    put:
      description: Update an existing test
      operationId: updateTest
      tags:
      - Test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        "200":
          description: Test updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
    get:
      description: Retrieve a paginated list of Tests with available count
      operationId: listTests
      tags:
      - Test
      parameters:
      - description: "__my, __all or a comma delimited  list of roles"
        example: __my
        name: roles
        in: query
        schema:
          type: string
      - description: limit the number of results
        example: 20
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: filter by page number of a paginated list of Tests
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
      - description: Field name to sort results
        example: name
        name: sort
        in: query
        schema:
          type: string
          default: name
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          allOf:
          - $ref: "#/components/schemas/SortDirection"
          - default: Ascending
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestQueryResult"
    post:
      description: Create a new test
      operationId: addTest
      tags:
      - Test
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Test"
      responses:
        "201":
          description: New test created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
  /api/test/byName/{name}:
    get:
      description: Retrieve a test by name
      operationId: getByNameOrId
      tags:
      - Test
      parameters:
      - description: Name of test to retrieve
        example: my-comprehensive-benchmark
        in: path
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
  /api/test/folders:
    get:
      description: Retrieve a list of all folders
      operationId: folders
      tags:
      - Test
      parameters:
      - description: "\"__my\", \"__all\" or a comma delimited  list of roles"
        example: __my
        name: roles
        in: query
        schema:
          type: string
      responses:
        "200":
          description: List of all folders
          content:
            application/json:
              example:
              - quarkus
              - ocp-perf-team
              schema:
                type: array
                items:
                  type: string
  /api/test/import:
    put:
      description: Update an existing Test using its exported version
      operationId: updateTestWithImport
      tags:
      - Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestExport"
        required: true
      responses:
        "200":
          description: Test updated successfully using its exported version
          content:
            application/json:
              schema:
                type: integer
    post:
      description: Import a previously exported Test as new Test
      operationId: addTestWithImport
      tags:
      - Test
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TestExport"
        required: true
      responses:
        "201":
          description: New Test created successfully from a previously exported one
          content:
            application/json:
              schema:
                type: integer
  /api/test/summary:
    get:
      description: Retrieve a summary of Tests in a folder
      operationId: getTestSummary
      tags:
      - Test
      parameters:
      - description: "\"__my\", \"__all\" or a comma delimited  list of roles"
        example: __my
        name: roles
        in: query
        schema:
          type: string
      - description: name of the Folder containing the Tests
        example: My Team Folder
        name: folder
        in: query
        schema:
          type: string
      - description: limit the result count
        example: 20
        name: limit
        schema:
          type: integer
          default: 20
        in: query
      - description: "filter by page number of a paginated list of, set to 0 means\
          \ return all results "
        example: 1
        name: page
        schema:
          type: integer
          default: 1
        in: query
      - description: Sort direction
        example: Ascending
        name: direction
        in: query
        schema:
          allOf:
          - $ref: "#/components/schemas/SortDirection"
          - default: Ascending
      - description: Filter by test name
        example: MyTest
        name: name
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestListing"
  /api/test/{id}:
    get:
      description: Retrieve a test by id
      operationId: getTest
      tags:
      - Test
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Test"
    delete:
      description: Delete a Test by id
      operationId: deleteTest
      tags:
      - Test
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "204":
          description: No Content
  /api/test/{id}/export:
    get:
      operationId: exportTest
      tags:
      - Test
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: A Test definition formatted as json
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TestExport"
  /api/test/{id}/filteringLabelValues:
    get:
      description: List all unique Label Values for a Test
      operationId: filteringLabelValues
      tags:
      - Test
      parameters:
      - description: Test ID to retrieve Filtering Label Values for
        example: 10
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: {}
  /api/test/{id}/fingerprint:
    get:
      description: List all Fingerprints for a Test
      operationId: listFingerprints
      tags:
      - Test
      parameters:
      - description: Test ID to retrieve Fingerprints for
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Fingerprints"
  /api/test/{id}/labelValues:
    get:
      description: List all Label Values for a Test
      operationId: getTestLabelValues
      tags:
      - Test
      parameters:
      - description: Test ID to retrieve Label Values for
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: Retrieve values for Filtering Labels
        example: true
        name: filtering
        in: query
        schema:
          type: boolean
          default: true
      - description: Retrieve values for Metric Labels
        example: false
        name: metrics
        in: query
        schema:
          type: boolean
          default: true
      - description: either a required json sub-document or path expression
        examples:
          object:
            description: json object that must exist in the values object
            value: "{labelName:necessaryValue,...}"
          string:
            description: valid filtering jsonpath that returns null if not found (not
              predicates)
            value: $.count ? (@ < 20 && @ > 10)
        name: filter
        in: query
        schema:
          type: string
          default: "{}"
      - description: ISO-like date time string or epoch millis
        example: 1970-01-01T00:00:00+00:00 or an integer
        name: before
        in: query
        schema:
          type: string
          default: ""
      - description: ISO-like date time string or epoch millis
        example: 1970-01-01T00:00:00+00:00 or an integer
        name: after
        in: query
        schema:
          type: string
          default: ""
      - description: json path to sortable value or start or stop for sorting by time
        example: $.label or start or stop
        name: sort
        in: query
        schema:
          type: string
          default: ""
      - description: either Ascending or Descending
        example: count
        name: direction
        in: query
        schema:
          type: string
          default: Ascending
      - description: the maximum number of results to include
        example: 10
        name: limit
        in: query
        schema:
          type: integer
          format: int32
      - description: which page to skip to when using a limit
        example: 2
        name: page
        in: query
        schema:
          type: integer
          format: int32
          default: 0
      - description: label name(s) to include in the result as scalar or comma separated
        examples:
          single:
            description: including a single label
            value: id
          multiple:
            description: including multiple labels
            value: "id,count"
        name: include
        in: query
        schema:
          type: array
          items:
            type: string
      - description: label name(s) to exclude from the result as scalar or comma separated
        examples:
          single:
            description: excluding a single label
            value: id
          multiple:
            description: excluding multiple labels
            value: "id,count"
        name: exclude
        in: query
        schema:
          type: array
          items:
            type: string
      - description: enable filtering for multiple values with an array of values
        example: true
        name: multiFilter
        in: query
        schema:
          type: boolean
          default: false
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ExportedLabelValues"
  /api/test/{id}/move:
    post:
      description: Update the folder for a Test. Tests can be moved to different folders
      operationId: updateFolder
      tags:
      - Test
      parameters:
      - description: Test ID to update
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      - description: New folder to store the tests
        example: My Benchmark Folder
        name: folder
        in: query
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/test/{id}/notifications:
    post:
      description: "Update notifications for a Test. It is possible to disable notifications\
        \ for a Test, so that no notifications are sent to subscribers"
      operationId: updateNotifications
      tags:
      - Test
      parameters:
      - description: Test ID to update
        example: 101
        name: id
        required: true
        in: path
        schema:
          type: integer
          format: int32
      - description: Whether notifications are enabled
        example: false
        name: enabled
        required: true
        in: query
        schema:
          type: boolean
      responses:
        "201":
          description: Created
  /api/test/{id}/recalculate:
    post:
      description: Recalculate Datasets for Test
      operationId: recalculateTestDatasets
      tags:
      - Test
      parameters:
      - description: Test ID to recalculate datasets for
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "201":
          description: Created
    get:
      description: Get recalculation status for Test
      operationId: getTestRecalculationStatus
      tags:
      - Test
      parameters:
      - description: Test ID to retrieve recalculation status for
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecalculationStatus"
  /api/test/{id}/transformers:
    post:
      description: Update transformers for Test
      operationId: updateTransformers
      tags:
      - Test
      parameters:
      - description: Test ID to retrieve Label Values for
        example: 101
        name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: integer
                format: int32
      responses:
        "201":
          description: Created
  /api/test/{id}/updateAccess:
    post:
      description: Update the Access configuration for a Test
      operationId: updateTestAccess
      tags:
      - Test
      parameters:
      - description: Test ID to update
        example: 101
        name: id
        required: true
        in: path
        schema:
          type: integer
          format: int32
      - description: Name of the new owner
        example: perf-team
        name: owner
        required: true
        in: query
        schema:
          type: string
      - description: New Access level for the Test
        example: "0"
        name: access
        required: true
        in: query
        schema:
          $ref: "#/components/schemas/Access"
      responses:
        "201":
          description: Created
  /api/user/administrators:
    post:
      description: Set the list of administrator users.
      operationId: updateAdministrators
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "201":
          description: Created
    get:
      description: Get the list of administrator users.
      operationId: administrators
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserData"
  /api/user/allTeams:
    get:
      description: Get list of all teams.
      operationId: getAllTeams
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/user/apikey:
    post:
      description: Create a new API key.
      operationId: newApiKey
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                type:
                  $ref: "#/components/schemas/KeyType"
        required: true
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
    get:
      description: List API keys.
      operationId: apiKeys
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ApiKeyResponse"
  /api/user/apikey/{id}/rename:
    put:
      description: Rename API key.
      operationId: renameApiKey
      tags:
      - User
      parameters:
      - description: id of the key to be renamed
        in: path
        name: id
        schema:
          type: integer
        required: true
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "204":
          description: No Content
  /api/user/apikey/{id}/revoke:
    put:
      description: Revoke API key.
      operationId: revokeApiKey
      tags:
      - User
      parameters:
      - description: id of the key to be revoked
        in: path
        name: id
        schema:
          type: integer
        required: true
      responses:
        "204":
          description: No Content
  /api/user/createUser:
    post:
      description: Create new user.
      operationId: createUser
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/UserData"
                password:
                  type: string
                team:
                  type: string
                roles:
                  type: array
                  items:
                    type: string
        required: true
      responses:
        "201":
          description: Created
  /api/user/defaultTeam:
    post:
      description: Set the default team of the current user.
      operationId: setDefaultTeam
      tags:
      - User
      requestBody:
        content:
          text/plain:
            schema:
              type: string
        required: true
      responses:
        "201":
          description: Created
    get:
      description: Get the default team of the current user.
      operationId: defaultTeam
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: string
  /api/user/info:
    post:
      description: Fetch user data for a group of users.
      operationId: info
      tags:
      - User
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserData"
  /api/user/roles:
    get:
      description: Get roles for the authenticated user.
      operationId: getRoles
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/user/search:
    get:
      description: Search for user(s) with an optional query condition.
      operationId: searchUsers
      tags:
      - User
      parameters:
      - name: query
        in: query
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserData"
  /api/user/team/{team}:
    delete:
      description: Remove existing team.
      operationId: deleteTeam
      tags:
      - User
      parameters:
      - description: Name of the team to be removed
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
    post:
      description: Create new team.
      operationId: addTeam
      tags:
      - User
      parameters:
      - description: Name of the team to be created
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "201":
          description: Created
  /api/user/team/{team}/members:
    post:
      description: Set the membership of a given team.
      operationId: updateTeamMembers
      tags:
      - User
      parameters:
      - description: Name of the team
        in: path
        name: team
        schema:
          type: string
        required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: array
                items: {}
        required: true
      responses:
        "201":
          description: Created
    get:
      description: Get the membership of a given team.
      operationId: teamMembers
      tags:
      - User
      parameters:
      - description: Name of the team
        in: path
        name: team
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: array
                  items: {}
  /api/user/teams:
    get:
      description: Get list of all teams.
      operationId: getTeams
      tags:
      - User
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /api/user/{username}:
    delete:
      description: Remove existing user.
      operationId: removeUser
      tags:
      - User
      parameters:
      - description: Username to remove
        in: path
        name: username
        schema:
          type: string
        required: true
      responses:
        "204":
          description: No Content
info:
  title: Horreum REST API
  version: "0.18"
  description: "Horreum automated change anomaly detection. For more information,\
    \ please see [https://horreum.hyperfoil.io/](https://horreum.hyperfoil.io/)"
